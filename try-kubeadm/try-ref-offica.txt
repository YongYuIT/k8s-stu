########ref to https://kubernetes.io/docs/setup/independent/install-kubeadm/

########Installing kubeadm --> Verify the MAC address and product_uuid are unique for every node
$ ip link
ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 00:50:56:22:b6:6f brd ff:ff:ff:ff:ff:ff
$ sudo cat /sys/class/dmi/id/product_uuid
7E714D56-0780-61F3-12B8-1AC1C355D92C

########Installing kubeadm -->Check required ports
可以参照表格https://kubernetes.io/docs/setup/independent/install-kubeadm/#check-required-ports进行配置，这里为了方便，禁用防火墙
$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld

########Installing kubeadm -->Installing runtime
参照https://kubernetes.io/docs/setup/cri/#docker
$ sudo yum install yum-utils device-mapper-persistent-data lvm2
$ sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
$ sudo yum update
$ sudo yum install docker-ce-18.06.2.ce
$ sudo mkdir /etc/docker
$ sudo gedit /etc/docker/daemon.json
########内容
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
$ sudo mkdir -p /etc/systemd/system/docker.service.d
$ sudo systemctl daemon-reload
$ sudo systemctl restart docker

########Installing kubeadm --> Installing kubeadm, kubelet and kubectl
$ lsmod | grep br_netfilter
########如果毛都没有
$ modprobe br_netfilter

$ sudo gedit /etc/yum.repos.d/kubernetes.repo ####上阿里云源 
$ sudo setenforce 0
$ sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
$ sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
$ sudo systemctl enable --now kubelet

$ sudo cat /etc/sysctl.d/k8s.conf
cat: /etc/sysctl.d/k8s.conf: No such file or directory
$ sudo gedit /etc/sysctl.d/k8s.conf
########内容
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
$ sudo sysctl --system

########至此安装kube-adm就全部完成了，下面尝试建立单节点集群，ref to https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/
$ sudo kubeadm init --kubernetes-version=v1.13.0 --pod-network-cidr=10.244.0.0/16
Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 192.168.186.131:6443 --token 92lz4d.9fncm254wvcu363s --discovery-token-ca-cert-hash sha256:6a5b2bedbe357a214ed64c405af4debb91539b5508f093e328fc3f5ab3b0f5a3
########为了可以在非root用户下运行kubectl，执行如下语句
$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

########为了使pod间能相互通信，需要安装pod网络通信插件，这里选择flannel
$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml

$ kubectl get node
NAME                    STATUS   ROLES    AGE     VERSION
localhost.localdomain   Ready    master   9m11s   v1.13.3
$ kubectl get pod --all-namespaces
NAMESPACE     NAME                                            READY   STATUS    RESTARTS   AGE
kube-system   coredns-86c58d9df4-dpnzn                        1/1     Running   0          8m36s
kube-system   coredns-86c58d9df4-fwsk6                        1/1     Running   0          8m36s
kube-system   etcd-localhost.localdomain                      1/1     Running   0          7m37s
kube-system   kube-apiserver-localhost.localdomain            1/1     Running   0          7m39s
kube-system   kube-controller-manager-localhost.localdomain   1/1     Running   0          7m35s
kube-system   kube-flannel-ds-amd64-z2gkc                     1/1     Running   0          22s
kube-system   kube-proxy-6lqxn                                1/1     Running   0          8m36s
kube-system   kube-scheduler-localhost.localdomain            1/1     Running   0          7m49s

########默认情况下，不允许在master节点上自建pod，这里尝试建立单节点集群，所以打开此限制
$ kubectl taint nodes --all node-role.kubernetes.io/master-

########在master所在机器加入node
$ sudo kubeadm join 192.168.186.131:6443 --token 92lz4d.9fncm254wvcu363s --discovery-token-ca-cert-hash sha256:6a5b2bedbe357a214ed64c405af4debb91539b5508f093e328fc3f5ab3b0f5a3
[preflight] Running pre-flight checks
	[WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'
[preflight] Some fatal errors occurred:
	[ERROR DirAvailable--etc-kubernetes-manifests]: /etc/kubernetes/manifests is not empty
	[ERROR FileAvailable--etc-kubernetes-kubelet.conf]: /etc/kubernetes/kubelet.conf already exists
	[ERROR Port-10250]: Port 10250 is in use
	[ERROR FileAvailable--etc-kubernetes-pki-ca.crt]: /etc/kubernetes/pki/ca.crt already exists
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
